# Generated by Django 4.0.4 on 2022-10-02 15:05

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AppointDoc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=300)),
                ('file_path', models.CharField(blank=True, max_length=300, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('text_raw', models.TextField(blank=True, null=True)),
                ('url', models.TextField(blank=True, null=True)),
                ('author', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Документ о назначении',
                'verbose_name_plural': 'Документы о назначении',
                'db_table': 'appoint_doc',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AppointLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_line', models.TextField(verbose_name='Строка с назначением')),
                ('position', models.CharField(max_length=700, verbose_name='Должность')),
                ('appoint_doc', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='appointments.appointdoc')),
            ],
            options={
                'verbose_name': 'Строка с назначением',
                'verbose_name_plural': 'Строки с назначением',
                'db_table': 'appoint_line',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family_name', models.CharField(max_length=128, verbose_name='фамилия')),
                ('name', models.CharField(max_length=128, verbose_name='имя')),
                ('patronymic', models.CharField(max_length=128, verbose_name='отчество')),
                ('comment', models.TextField(blank=True, default='', verbose_name='комментарий')),
                ('locked_page', models.BooleanField(default=False, verbose_name='Заблокированная страница')),
                ('hidden', models.BooleanField(default=False, verbose_name='Скрытая персона')),
                ('wikipedia', models.URLField(blank=True, max_length=255, null=True, verbose_name='Ссылка на wikipedia')),
                ('wikipedia_id', models.CharField(blank=True, max_length=128, null=True, verbose_name='Wikipedia ID')),
                ('twitter', models.URLField(blank=True, max_length=255, null=True, verbose_name='Twitter')),
                ('facebook', models.URLField(blank=True, max_length=255, null=True, verbose_name='Facebook profile')),
                ('vkontakte', models.URLField(blank=True, max_length=255, null=True, verbose_name='VK profile')),
                ('dissernet', models.IntegerField(blank=True, null=True, verbose_name='Dissernet ID')),
                ('rupep_id', models.CharField(blank=True, db_index=True, max_length=50, null=True, verbose_name='RUPEP ID')),
                ('created_from_rupep', models.BooleanField(default=False, verbose_name='Создана из RUPEP')),
                ('rupep', models.URLField(blank=True, max_length=255, null=True, verbose_name='Ссылка на Rupep.org')),
                ('inn', models.CharField(blank=True, max_length=12, null=True, verbose_name='ИНН')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужской'), ('F', 'Женский')], help_text='мужской / женский', max_length=1, null=True, verbose_name='Пол')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('death_date', models.DateField(blank=True, null=True, verbose_name='Дата смерти')),
                ('duma_id', models.IntegerField(blank=True, null=True, verbose_name='ID в API ГосДумы')),
                ('redflag_index', models.FloatField(blank=True, null=True, verbose_name='Индекс красных флагов')),
            ],
            options={
                'verbose_name': 'должностное лицо',
                'verbose_name_plural': 'должностные лица',
                'ordering': ['family_name', 'name', 'patronymic'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='название региона')),
                ('short_name', models.CharField(max_length=100, verbose_name='короткое название региона')),
                ('extra_short_name', models.CharField(max_length=100, verbose_name='техническое короткое название региона')),
                ('code', models.IntegerField(verbose_name='автомобильный код региона')),
                ('slug', models.CharField(help_text='Используется для установки соответствия областям на карте', max_length=30, null=True, verbose_name='буквенный код')),
                ('genitive', models.CharField(blank=True, max_length=255, null=True, verbose_name='родительный падеж')),
            ],
            options={
                'verbose_name': 'регион',
                'verbose_name_plural': 'регионы России',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PersonsNAppointments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('appoint', 'назначение'), ('resign', 'отставка')], default='undefined', max_length=20, verbose_name='Событие')),
                ('is_shown', models.BooleanField(default=False, verbose_name='Отображается ли на сайте')),
                ('app_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointees', to='appointments.appointline', verbose_name='Должность')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='persons_appoints', to='appointments.person')),
            ],
            options={
                'verbose_name_plural': 'PersonsAndAppointments',
                'db_table': 'persons_n_appointments',
                'managed': True,
                'unique_together': {('action', 'person', 'app_line')},
            },
        ),
        migrations.AddField(
            model_name='person',
            name='appointments',
            field=models.ManyToManyField(related_name='app_pers', through='appointments.PersonsNAppointments', to='appointments.appointline'),
        ),
        migrations.AddField(
            model_name='appointline',
            name='persons',
            field=models.ManyToManyField(related_name='pers_appoints', through='appointments.PersonsNAppointments', to='appointments.person'),
        ),
        migrations.AddField(
            model_name='appointdoc',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='appointments.region'),
        ),
        migrations.CreateModel(
            name='AppointPerson',
            fields=[
            ],
            options={
                'verbose_name': 'Персона с назначениями',
                'verbose_name_plural': 'Персоны с назначениями',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('appointments.person',),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['hidden', 'family_name', 'name', 'patronymic'], name='fullname_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='appointline',
            unique_together={('appoint_doc', 'position')},
        ),
        migrations.CreateModel(
            name='SelectPersonForAppointment',
            fields=[
            ],
            options={
                'verbose_name': 'Назначение-дубликат',
                'verbose_name_plural': 'Назначения-дубликаты',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('appointments.appointperson',),
        ),
    ]
